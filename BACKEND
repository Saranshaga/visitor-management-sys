
### Visitor Endpoints

GET    /api/visitors              - Get all visitors
GET    /api/visitors/{id}         - Get visitor by ID
POST   /api/visitors              - Create new visitor
PUT    /api/visitors/{id}         - Update visitor
DELETE /api/visitors/{id}         - Delete visitor
GET    /api/visitors/search?q={query} - Search visitors


### Host Endpoints

GET    /api/hosts                 - Get all hosts
GET    /api/hosts/{id}            - Get host by ID
POST   /api/hosts                 - Create new host
PUT    /api/hosts/{id}            - Update host
DELETE /api/hosts/{id}            - Delete host


### Visit Endpoints

GET    /api/visits                - Get all visits
GET    /api/visits/{id}           - Get visit by ID
POST   /api/visits                - Create new visit (check-in)
PUT    /api/visits/{id}           - Update visit
PUT    /api/visits/{id}/checkout  - Check out visitor
GET    /api/visits/active         - Get active visits
GET    /api/visits/today          - Get today's visits
GET    /api/visits/visitor/{id}   - Get visits by visitor ID


### Report Endpoints

GET    /api/reports/daily?date={date}           - Daily visitor report
GET    /api/reports/history?from={date}&to={date} - Visitor history report
GET    /api/reports/visitor/{id}?from={date}&to={date} - Visitor-specific report
GET    /api/reports/host/{id}?from={date}&to={date}    - Host-specific report


## C# Model Classes You'll Need

Here are the C# model classes that correspond to your TypeScript types:

csharp
// Models/Visitor.cs
public class Visitor
{
    public int VisitorID { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string? Company { get; set; }
    public string? ContactNumber { get; set; }
    public string? Email { get; set; }
    public DateTime CreatedDate { get; set; }
}

// Models/Host.cs
public class Host
{
    public int HostID { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string? Department { get; set; }
    public string? ContactNumber { get; set; }
}

// Models/Visit.cs
public class Visit
{
    public int VisitID { get; set; }
    public int VisitorID { get; set; }
    public int HostID { get; set; }
    public string Purpose { get; set; }
    public DateTime CheckInTime { get; set; }
    public DateTime? CheckOutTime { get; set; }
    public string Status { get; set; } // "Checked In" or "Checked Out"

    // Navigation properties
    public virtual Visitor Visitor { get; set; }
    public virtual Host Host { get; set; }
}


## Database Schema (Entity Framework)

You'll want to create these tables in your SQL Server database:

sql
CREATE TABLE Visitors (
    VisitorID int IDENTITY(1,1) PRIMARY KEY,
    FirstName nvarchar(100) NOT NULL,
    LastName nvarchar(100) NOT NULL,
    Company nvarchar(200),
    ContactNumber nvarchar(20),
    Email nvarchar(255),
    CreatedDate datetime2 DEFAULT GETDATE()
);

CREATE TABLE Hosts (
    HostID int IDENTITY(1,1) PRIMARY KEY,
    FirstName nvarchar(100) NOT NULL,
    LastName nvarchar(100) NOT NULL,
    Department nvarchar(100),
    ContactNumber nvarchar(20)
);

CREATE TABLE Visits (
    VisitID int IDENTITY(1,1) PRIMARY KEY,
    VisitorID int NOT NULL,
    HostID int NOT NULL,
    Purpose nvarchar(200) NOT NULL,
    CheckInTime datetime2 DEFAULT GETDATE(),
    CheckOutTime datetime2,
    Status nvarchar(20) DEFAULT 'Checked In',
    FOREIGN KEY (VisitorID) REFERENCES Visitors(VisitorID),
    FOREIGN KEY (HostID) REFERENCES Hosts(HostID)
);


## Steps to Create Your C# Backend

1. *Create a new ASP.NET Core Web API project:*
   bash
   dotnet new webapi -n VisitorManagementAPI
   cd VisitorManagementAPI
   

2. *Install required NuGet packages:*
   bash
   dotnet add package Microsoft.EntityFrameworkCore.SqlServer
   dotnet add package Microsoft.EntityFrameworkCore.Tools
   dotnet add package Microsoft.AspNetCore.Cors
   

3. *Create the DbContext:*
   csharp
   public class VisitorManagementContext : DbContext
   {
       public DbSet Visitors { get; set; }
       public DbSet Hosts { get; set; }
       public DbSet Visits { get; set; }

       protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
       {
           optionsBuilder.UseSqlServer("your-connection-string");
       }
   }
   
   builder.Services.AddCors(options =>
   {
       options.AddPolicy("AllowReactApp",
           policy => policy
               .WithOrigins("http://localhost:5173") // Your React app URL
               .AllowAnyHeader()
               .AllowAnyMethod());
   });
